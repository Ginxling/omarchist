use super::ConfigGenerator;
use serde_json::{json, Value};

pub struct HyprlandGenerator;

unsafe impl Send for HyprlandGenerator {}
unsafe impl Sync for HyprlandGenerator {}

impl ConfigGenerator for HyprlandGenerator {
    fn get_app_name(&self) -> &'static str {
        "hyprland"
    }

    fn get_file_name(&self) -> &'static str {
        "hyprland.conf"
    }

    fn generate_config(&self, theme_data: &Value) -> Result<String, String> {
        let empty_obj = json!({});
        let hyprland = theme_data.get("hyprland").unwrap_or(&empty_obj);

        // Extract color values with defaults from template
        let colors = hyprland.get("colors").unwrap_or(&empty_obj);
        let mut active_border = colors
            .get("active_border")
            .and_then(|a| a.as_str())
            .unwrap_or("8A8A8D")
            .to_string();
        // normalize to hex without leading '#'
        if active_border.starts_with('#') {
            active_border = active_border.trim_start_matches('#').to_string();
        }

        Ok(format!(
            r#"# ────────────────────────────────────────────────────────────
# Omarchy Custom Theme for Hyprland
# Generated by Omarchist
# ────────────────────────────────────────────────────────────

general {{
    col.active_border = rgb({active_border})
}}

"#
        ))
    }

    fn get_config_schema(&self) -> Value {
        json!({
            "type": "object",
            "properties": {
                "colors": {
                    "type": "object",
                    "properties": {
                        "active_border": {
                            "type": "string",
                            "format": "color",
                            "output_format": "hex-no-hash",
                            "default": "8A8A8D",
                        }
                    }
                }
            }
        })
    }

    fn parse_existing_config(&self, _content: &str) -> Result<Value, String> {
        // For now, return empty - could implement conf file parsing if needed
        Ok(json!({}))
    }
}
